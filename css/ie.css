p{-ms-word-wrap:break-word;word-break:break-word;word-wrap:break-word;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;-webkit-hyphenate-before:2;-webkit-hyphenate-after:3;hyphenate-lines:3;-webkit-font-feature-settings:"liga", "dlig";-ms-font-feature-settings:"liga", "dlig";-o-font-feature-settings:"liga", "dlig";font-feature-settings:"liga", "dlig"}.entry-content .alignleft,.entry-content img.alignleft{margin-right:1.5em;display:inline;float:left}.entry-content .alignright,.entry-content img.alignright{margin-left:1.5em;display:inline;float:right}.entry-content .aligncenter,.entry-content img.aligncenter{margin-right:auto;margin-left:auto;display:block;clear:both}.wrap{width:760px}.nav{border:0}.nav ul{background:#323944;margin-top:0}.nav li{float:left;position:relative}.nav li a{border-bottom:0}.nav li a:hover,.nav li a:focus{color:#fff;text-decoration:underline}.nav li ul.sub-menu,.nav li ul.children{margin-top:0;border:1px solid #ccc;border-top:0;position:absolute;visibility:hidden;z-index:8999}.nav li ul.sub-menu li a,.nav li ul.children li a{padding-left:10px;border-right:0;display:block;width:180px;border-bottom:1px solid #ccc}.nav li ul.sub-menu li:last-child a,.nav li ul.children li:last-child a{border-bottom:0}.nav li ul.sub-menu li ul,.nav li ul.children li ul{top:0;left:100%}.nav li:hover>ul{top:auto;visibility:visible}.sidebar{margin-top:2.2em}.widgettitle{border-bottom:2px solid #444;margin-bottom:0.75em}.widget{padding:0 10px;margin:2.2em 0}.widget ul li{margin-bottom:0.75em}.widget ul li ul{margin-top:0.75em;padding-left:1em}.wrap{width:1040px}

/*# sourceMappingURL=data:application/json;base64, */
